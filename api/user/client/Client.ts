/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { RavenApi } from "../../..";
import urlJoin from "url-join";
import * as schemas from "../../../schemas";

export interface Client {
  createOrUpdate(request: RavenApi.user.createOrUpdate.Request): Promise<RavenApi.user.createOrUpdate.Response>;
  get(request: RavenApi.user.get.Request): Promise<RavenApi.user.get.Response>;
}

export declare namespace Client {
  interface Options {
    _origin: string;
    authorization?: core.Supplier<string>;
  }
}

export class Client implements Client {
  constructor(private readonly options: Client.Options) {}

  public async createOrUpdate(
    request: RavenApi.user.createOrUpdate.Request
  ): Promise<RavenApi.user.createOrUpdate.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/v1/apps/${request.appId}/users`),
      method: "POST",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
      body: schemas.user.CreateUserRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.user.RavenUser.parse(response.body as schemas.user.RavenUser.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as schemas.user.createOrUpdate.Error.Raw)?.errorName) {
        case "AppNotFoundError":
          return {
            ok: false,
            error: schemas.user.createOrUpdate.Error.parse(
              response.error.body as schemas.user.createOrUpdate.Error.Raw
            ),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async get(request: RavenApi.user.get.Request): Promise<RavenApi.user.get.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/v1/apps/${request.appId}/users/${request.userId}`),
      method: "GET",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.user.RavenUser.parse(response.body as schemas.user.RavenUser.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as schemas.user.get.Error.Raw)?.errorName) {
        case "AppNotFoundError":
        case "UserNotFoundError":
          return {
            ok: false,
            error: schemas.user.get.Error.parse(response.error.body as schemas.user.get.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
