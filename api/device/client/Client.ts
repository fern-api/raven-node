/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { RavenApi } from "../../..";
import urlJoin from "url-join";
import * as schemas from "../../../schemas";

export interface Client {
  add(request: RavenApi.device.add.Request): Promise<RavenApi.device.add.Response>;
  update(request: RavenApi.device.update.Request): Promise<RavenApi.device.update.Response>;
  deleteDevice(request: RavenApi.device.deleteDevice.Request): Promise<RavenApi.device.deleteDevice.Response>;
  getDevice(request: RavenApi.device.getDevice.Request): Promise<RavenApi.device.getDevice.Response>;
}

export declare namespace Client {
  interface Options {
    _origin: string;
    authorization?: core.Supplier<string>;
  }
}

export class Client implements Client {
  constructor(private readonly options: Client.Options) {}

  public async add(request: RavenApi.device.add.Request): Promise<RavenApi.device.add.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/v1/apps/${request.appId}/users/${request.userId}/devices`),
      method: "POST",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
      body: schemas.device.Device.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.device.Device.parse(response.body as schemas.device.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async update(request: RavenApi.device.update.Request): Promise<RavenApi.device.update.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options._origin,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "PUT",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
      body: schemas.device.Device.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.device.Device.parse(response.body as schemas.device.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async deleteDevice(
    request: RavenApi.device.deleteDevice.Request
  ): Promise<RavenApi.device.deleteDevice.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options._origin,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "DELETE",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async getDevice(request: RavenApi.device.getDevice.Request): Promise<RavenApi.device.getDevice.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options._origin,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "GET",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.device.Device.parse(response.body as schemas.device.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
