/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface Platform<RawValue extends Platform.RawValue = Platform.RawValue> {
  toString: () => RawValue;
  visit: <Result>(visitor: Platform._Visitor<Result>) => Result;
}

const _Android: Platform<"android"> = {
  toString: () => "android",
  visit: (visitor) => visitor.android(),
};
const _Web: Platform<"web"> = {
  toString: () => "web",
  visit: (visitor) => visitor.web(),
};
const _Ios: Platform<"ios"> = {
  toString: () => "ios",
  visit: (visitor) => visitor.ios(),
};
export const Platform = {
  Android: _Android,
  Web: _Web,
  Ios: _Ios,
} as const;

export declare namespace Platform {
  type RawValue = "android" | "web" | "ios" | string;

  interface _Visitor<Result> {
    android: () => Result;
    web: () => Result;
    ios: () => Result;
    _other: (value: string) => Result;
  }
}
