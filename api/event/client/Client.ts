/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { RavenApi } from "../../..";
import urlJoin from "url-join";
import * as schemas from "../../../schemas";

export interface Client {
  send(request: RavenApi.event.send.Request): Promise<RavenApi.event.send.Response>;
  sendBulk(request: RavenApi.event.sendBulk.Request): Promise<RavenApi.event.sendBulk.Response>;
}

export declare namespace Client {
  interface Options {
    _origin: string;
    authorization?: core.Supplier<string>;
  }
}

export class Client implements Client {
  constructor(private readonly options: Client.Options) {}

  public async send(request: RavenApi.event.send.Request): Promise<RavenApi.event.send.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/v1/apps/${request.appId}/events/send`),
      method: "POST",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
      body: schemas.event.SendEventRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.event.SendEventResponse.parse(response.body as schemas.event.SendEventResponse.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as schemas.event.send.Error.Raw)?.errorName) {
        case "EventNotFoundError":
        case "EventNotPublishedError":
          return {
            ok: false,
            error: schemas.event.send.Error.parse(response.error.body as schemas.event.send.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async sendBulk(request: RavenApi.event.sendBulk.Request): Promise<RavenApi.event.sendBulk.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/v1/apps/${request.appId}/events/bulk_send`),
      method: "POST",
      headers: {
        Authorization: await core.Supplier.get(this.options.authorization),
      },
      body: schemas.event.BulkSendEventRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.event.SendEventResponse.parse(response.body as schemas.event.SendEventResponse.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as schemas.event.sendBulk.Error.Raw)?.errorName) {
        case "EventNotFoundError":
        case "EventNotPublishedError":
          return {
            ok: false,
            error: schemas.event.sendBulk.Error.parse(response.error.body as schemas.event.sendBulk.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
