/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { RavenApi } from "@ravenapp/raven";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.RavenApiEnvironment | string;
        authorization?: core.Supplier<string>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * This endpoint allows you to send messages
     * @throws {RavenApi.EventNotFoundError}
     */
    public async send(appId: RavenApi.AppId, request: RavenApi.SendEventRequest): Promise<RavenApi.SendEventResponse> {
        const { idempotencyKey, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.RavenApiEnvironment.Prod,
                `/v1/apps/${appId}/events/send`
            ),
            method: "POST",
            headers: {
                "Idempotency-Key": idempotencyKey,
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.SendEventRequest.json(_body),
        });
        if (_response.ok) {
            return await serializers.SendEventResponse.parse(_response.body as serializers.SendEventResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new RavenApi.EventNotFoundError(
                        await serializers.EventNotFoundErrorBody.parse(
                            _response.error.body as serializers.EventNotFoundErrorBody.Raw
                        )
                    );
                default:
                    throw new errors.RavenApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RavenApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RavenApiTimeoutError();
            case "unknown":
                throw new errors.RavenApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async sendBulk(
        appId: RavenApi.AppId,
        request: RavenApi.BulkSendEventRequest
    ): Promise<RavenApi.SendEventResponse> {
        const { idempotencyKey, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.RavenApiEnvironment.Prod,
                `/v1/apps/${appId}/events/bulk_send`
            ),
            method: "POST",
            headers: {
                "Idempotency-Key": idempotencyKey,
                Authorization: await core.Supplier.get(this.options.authorization),
            },
            body: await serializers.BulkSendEventRequest.json(_body),
        });
        if (_response.ok) {
            return await serializers.SendEventResponse.parse(_response.body as serializers.SendEventResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RavenApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RavenApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RavenApiTimeoutError();
            case "unknown":
                throw new errors.RavenApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
