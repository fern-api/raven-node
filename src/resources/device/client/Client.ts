/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { RavenApi } from "@ravenapp/raven";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      authorization?: core.Supplier<string>;
    };
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async add(request: RavenApi.device.add.Request): Promise<RavenApi.device.add.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Prod,
        `/v1/apps/${request.appId}/users/${request.userId}/devices`
      ),
      method: "POST",
      headers: {
        Authorization: await core.Supplier.get(this.options.auth?.authorization),
      },
      body: await serializers.Device.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: await serializers.Device.parse(response.body as serializers.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async update(request: RavenApi.device.update.Request): Promise<RavenApi.device.update.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Prod,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "PUT",
      headers: {
        Authorization: await core.Supplier.get(this.options.auth?.authorization),
      },
      body: await serializers.Device.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: await serializers.Device.parse(response.body as serializers.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async delete(request: RavenApi.device.delete.Request): Promise<RavenApi.device.delete.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Prod,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "DELETE",
      headers: {
        Authorization: await core.Supplier.get(this.options.auth?.authorization),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async getDevice(request: RavenApi.device.getDevice.Request): Promise<RavenApi.device.getDevice.Response> {
    const response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Prod,
        `/v1/apps/${request.appId}/users/${request.userId}/devices/${request.deviceId}`
      ),
      method: "GET",
      headers: {
        Authorization: await core.Supplier.get(this.options.auth?.authorization),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: await serializers.Device.parse(response.body as serializers.Device.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
