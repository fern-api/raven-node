/**
 * This file auto-generated by Fern from our API Definition.
 */

import { RavenApi } from "../../..";
import * as core from "../../../core";

export const Error: core.schemas.Schema<Error.Raw, RavenApi.event.send.Error> = core.schemas
  .union("errorName", {
    EventNotFoundError: core.schemas.object({}),
    EventNotPublishedError: core.schemas.object({}),
  })
  .transform<RavenApi.event.send.Error>({
    parse: (value) => {
      switch (value.errorName) {
        case "EventNotFoundError": {
          return {
            ...value,
            _visit: (visitor) => visitor.eventNotFoundError(),
          };
        }
        case "EventNotPublishedError": {
          return {
            ...value,
            _visit: (visitor) => visitor.eventNotPublishedError(),
          };
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.EventNotFoundError | Error.EventNotPublishedError;

  interface EventNotFoundError {
    errorName: "EventNotFoundError";
  }

  interface EventNotPublishedError {
    errorName: "EventNotPublishedError";
  }
}
